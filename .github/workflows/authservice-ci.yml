name: CI/CD Pipeline AuthService.API

on:
  workflow_run:
    workflows: ["CI/CD Pipeline Infraestrutura de Serviços"]
    types:
      - completed
  push:
    branches:
      - feature/implementar-kubernetes-final
    paths:
      - 'api/AuthService.API/**'
      - 'api/RegionalContactsApp.IntegrationTests/AuthControllerTests.cs'
      - 'api/RegionalContactsApp.Tests/AuthControllerTests.cs'
      - 'api/RegionalContactsApp.Infrastructure/Repositories/DatabaseInitializer.cs'
      - 'api/RegionalContactsApp.Infrastructure/Repositories/UserRepository.cs.cs'
      - 'api/RegionalContactsApp.Domain/Entities/User.cs'
      - 'api/RegionalContactsApp.Application/Services/UserService.cs'
      - 'api/RegionalContactsApp.Application/Workservices/UserRegisteredConsumerService.cs'
      - 'docker-compose.AuthService.yml'
      - '.github/workflows/authservice-ci.yml'
      - 'api/Dockerfile.AuthApi'
  pull_request:
    branches:
      - main
    paths:
      - 'api/AuthService.API/**'
      - 'api/RegionalContactsApp.IntegrationTests/AuthControllerTests.cs'
      - 'api/RegionalContactsApp.Tests/AuthControllerTests.cs'
      - 'api/RegionalContactsApp.Infrastructure/Repositories/DatabaseInitializer.cs'
      - 'api/RegionalContactsApp.Infrastructure/Repositories/UserRepository.cs.cs'
      - 'api/RegionalContactsApp.Domain/Entities/User.cs'
      - 'api/RegionalContactsApp.Application/Services/UserService.cs'
      - 'api/RegionalContactsApp.Application/Workservices/UserRegisteredConsumerService.cs'
      - 'docker-compose.AuthService.yml'
      - '.github/workflows/authservice-ci.yml'
      - 'api/Dockerfile.AuthApi'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: matheus
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: contactsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U matheus -d contactsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v3

      - name: Configurar .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Esperar pelo Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U matheus; do
            echo "Esperando pelo Postgres...";
            sleep 5;
          done

      - name: Esperar pelo RabbitMQ
        run: |
          until curl -f http://localhost:15672; do
            echo "Esperando pelo RabbitMQ...";
            sleep 5;
          done

      - name: Inicializar banco de dados
        run: |
          chmod +x initialize_db.sh
          ./initialize_db.sh

      - name: Restaurar dependências
        run: dotnet restore api/RegionalRegionalContactsApp.sln

      - name: Compilar solução
        run: dotnet build api/RegionalRegionalContactsApp.sln --no-restore --configuration Release

      - name: Executar testes unitários com cobertura
        run: |
          dotnet test api/RegionalContactsApp.Tests/RegionalContactsApp.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/UnitTests

      - name: Executar testes de integração com cobertura
        env:
          ConnectionStrings__DefaultConnection: Server=localhost;Port=5432;Database=contactsdb;User Id=matheus;Password=123456;
        run: |
          dotnet test api/RegionalContactsApp.IntegrationTests/RegionalContactsApp.IntegrationTests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/IntegrationTests

      - name: Relatar cobertura dos testes unitários
        uses: actions/upload-artifact@v3
        with:
          name: cobertura-teste-unitario
          path: ./TestResults/UnitTests

      - name: Relatar cobertura dos testes de integração
        uses: actions/upload-artifact@v3
        with:
          name: cobertura-teste-integracao
          path: ./TestResults/IntegrationTests

  build:
    needs: test
    runs-on: self-hosted

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v3

      - name: Iniciar o Minikube
        run: |
          minikube status || minikube start --driver=docker
        shell: bash

      - name: Configurar Docker para usar Minikube
        run: |
          eval $(minikube docker-env)
        shell: bash

      - name: Construir a imagem Docker
        run: |
          docker build -t auth-service:latest -f ./api/Dockerfile.AuthApi ./api
        shell: bash

      - name: Carregar imagem no Minikube
        run: |
          minikube image load auth-service:latest
        shell: bash

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v3

      - name: Aplicar manifests no Kubernetes
        run: |
          kubectl apply -f k8s/ -n monitoring
        shell: bash
