name: CI/CD Pipeline AuthService.API

on:
  push:
    branches:
      - feature/criar-deploy-microservices
    paths:
      - 'api/AuthService.API/**'
      - 'docker-compose.AuthService.yml'
      - '.github/workflows/authservice-ci.yml'
      - 'api/Dockerfile.AuthApi'
  pull_request:
    branches:
      - feature/criar-deploy-microservices
    paths:
      - 'api/AuthService.API/**'
      - 'docker-compose.AuthService.yml'
      - '.github/workflows/authservice-ci.yml'
      - 'api/Dockerfile.AuthApi'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: matheus
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: contactsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U matheus -d contactsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672  # Porta padrão do RabbitMQ
          - 15672:15672  # Porta do painel de gerenciamento do RabbitMQ
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v3

    - name: Configurar .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Esperar pelo Postgres
      run: |
        until pg_isready -h localhost -p 5432 -U matheus; do
          echo "Esperando pelo Postgres...";
          sleep 5;
        done

    - name: Esperar pelo RabbitMQ
      run: |
        until curl -f http://localhost:15672; do
          echo "Esperando pelo RabbitMQ...";
          sleep 5;
        done

    - name: Inicializar banco de dados
      run: |
        chmod +x initialize_db.sh
        ./initialize_db.sh

    # Restaurar as dependências da solução completa
    - name: Restaurar dependências
      run: dotnet restore api/RegionalRegionalContactsApp.sln  # Restaurar a solução completa

    # Compilar a solução completa
    - name: Compilar solução
      run: dotnet build api/RegionalRegionalContactsApp.sln --no-restore --configuration Release  # Compilar a solução completa

    # Executar testes unitários no projeto RegionalContactsApp.Tests
    - name: Executar testes unitários com cobertura (RegionalContactsApp.Tests)
      run: |
        dotnet test api/RegionalContactsApp.Tests/RegionalContactsApp.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/UnitTests

    # Executar testes de integração no projeto RegionalContactsApp.IntegrationTests
    - name: Executar testes de integração com cobertura (RegionalContactsApp.IntegrationTests)
      env:
        ConnectionStrings__DefaultConnection: Server=localhost;Port=5432;Database=contactsdb;User Id=matheus;Password=123456;
      run: |
        dotnet test api/RegionalContactsApp.IntegrationTests/RegionalContactsApp.IntegrationTests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/IntegrationTests

    # Relatar cobertura dos testes unitários
    - name: Relatar cobertura dos testes unitários
      uses: actions/upload-artifact@v3
      with:
        name: cobertura-teste-unitario
        path: ./TestResults/UnitTests

    # Relatar cobertura dos testes de integração
    - name: Relatar cobertura dos testes de integração
      uses: actions/upload-artifact@v3
      with:
        name: cobertura-teste-integracao
        path: ./TestResults/IntegrationTests

  build:
    needs: test
    runs-on: self-hosted

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v3

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Construir imagens Docker da API de autenticação
      run: |
        docker build --no-cache --pull -t auth-api:latest -f ./api/Dockerfile.AuthApi ./api
      shell: cmd

    - name: Limpar cache do Docker
      run: docker builder prune -f
      shell: cmd

    - name: Limpar sistema Docker
      run: docker system prune -af --volumes
      shell: cmd

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v3

    - name: Verificar existência do diretório e navegar até ele
      run: |
        if not exist C:\projects\fiap (
          echo "Criando o diretório C:\projects\fiap"
          mkdir C:\projects\fiap
        )
        cd C:\projects\fiap
      shell: cmd

    - name: Fazer deploy localmente
      run: |
        if docker-compose -f docker-compose.AuthService.yml ps; then
          docker-compose -f docker-compose.AuthService.yml down
        else
          echo "Docker Compose não está rodando."
        fi
        docker-compose -f docker-compose.AuthService.yml build --no-cache
        docker-compose -f docker-compose.AuthService.yml up -d
      shell: cmd
