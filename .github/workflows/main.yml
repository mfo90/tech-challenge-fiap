name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/workflow-local

jobs:
  test:
    runs-on: self-hosted

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: matheus
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: contactsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U matheus -d contactsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v2

    - name: Configurar .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'

    - name: Esperar pelo Postgres
      run: |
        while (!(pg_isready -h localhost -p 5432 -U matheus))
        do
          echo "Esperando pelo Postgres..."
          Start-Sleep -Seconds 5
        done

    - name: Inicializar banco de dados
      run: .\initialize_db.ps1

    - name: Restaurar dependências
      run: dotnet restore api/RegionalRegionalContactsApp.sln

    - name: Compilar solução
      run: dotnet build api/RegionalRegionalContactsApp.sln --no-restore --configuration Release

    - name: Executar testes unitários com cobertura
      run: |
        dotnet test api/RegionalContactsApp.Tests/RegionalContactsApp.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/UnitTests

    - name: Executar testes de integração com cobertura
      env:
        ConnectionStrings__DefaultConnection: Server=localhost;Port=5432;Database=contactsdb;User Id=matheus;Password=123456;
      run: |
        dotnet test api/RegionalContactsApp.IntegrationTests/RegionalContactsApp.IntegrationTests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/IntegrationTests

    - name: Relatar cobertura dos testes unitários
      uses: actions/upload-artifact@v2
      with:
        name: cobertura-teste-unitario
        path: ./TestResults/UnitTests

    - name: Relatar cobertura dos testes de integração
      uses: actions/upload-artifact@v2
      with:
        name: cobertura-teste-integracao
        path: ./TestResults/IntegrationTests

  build:
    needs: test
    runs-on: self-hosted

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v2

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Construir imagens Docker
      run: |
        docker build --no-cache --pull -t api:latest -f ./api/Dockerfile.api ./api
        docker build --no-cache --pull -t angular:latest -f ./regional-contacts-app/Dockerfile.angular ./regional-contacts-app

    - name: Salvar imagens Docker em arquivos tar
      run: |
        docker save api:latest -o api.tar
        docker save angular:latest -o angular.tar

    - name: Criar diretório para os arquivos tar, se não existir
      run: |
        if (!(Test-Path -Path "C:\projects\fiap")) {
          New-Item -Path "C:\projects\fiap" -ItemType Directory
        }

    - name: Definir permissões para arquivos tar
      run: |
        icacls api.tar /grant Everyone:F
        icacls angular.tar /grant Everyone:F

    - name: Transferir imagens Docker para o diretório local
      run: |
        Move-Item api.tar C:\projects\fiap\
        Move-Item angular.tar C:\projects\fiap\

    - name: Limpar cache do Docker
      run: docker builder prune -f

    - name: Limpar sistema Docker
      run: docker system prune -af --volumes

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Fazer checkout do código
      uses: actions/checkout@v2

    - name: Fazer deploy localmente
      run: |
        cd C:\projects\fiap
        docker load -i api.tar
        docker load -i angular.tar
        docker-compose down
        docker-compose up -d
