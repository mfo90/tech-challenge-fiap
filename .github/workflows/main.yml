name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/criar-teste-integracao

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: matheus
          POSTGRES_PASSWORD: 123456
          POSTGRES_DB: contactsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U matheus -d contactsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'  # Certifique-se de que a versão do .NET Core está correta

    - name: Wait for Postgres
      run: |
        until pg_isready -h localhost -p 5432 -U matheus; do
          echo "Waiting for postgres...";
          sleep 5;
        done

    - name: Initialize database
      run: dotnet run --project api/RegionalContactsApp.API/RegionalContactsApp.API.csproj

    - name: Restore dependencies
      run: dotnet restore api/RegionalRegionalContactsApp.sln

    - name: Build solution
      run: dotnet build api/RegionalRegionalContactsApp.sln --no-restore --configuration Release

    - name: Run unit tests with coverage
      run: |
        dotnet test api/RegionalContactsApp.Tests/RegionalContactsApp.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/UnitTests

    - name: Run integration tests with coverage
      run: |
        dotnet test api/RegionalContactsApp.IntegrationTests/RegionalContactsApp.IntegrationTests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/IntegrationTests

    - name: Report unit test coverage
      uses: actions/upload-artifact@v2
      with:
        name: unit-test-coverage
        path: ./TestResults/UnitTests

    - name: Report integration test coverage
      uses: actions/upload-artifact@v2
      with:
        name: integration-test-coverage
        path: ./TestResults/IntegrationTests

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker images
      run: |
        docker build --no-cache --pull -t api:latest -f ./api/Dockerfile.api ./api
        docker build --no-cache --pull -t angular:latest -f ./regional-contacts-app/Dockerfile.angular ./regional-contacts-app

    - name: Save Docker images to tar files
      run: |
        docker save api:latest -o api.tar
        docker save angular:latest -o angular.tar

    - name: Set permissions for tar files
      run: |
        chmod 644 api.tar
        chmod 644 angular.tar

    - name: Transfer Docker images to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "*.tar"
        target: "~/projects/fiap/"

    - name: Transfer project files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "."
        target: "~/projects/fiap/"

    - name: Clean up Docker cache
      run: docker builder prune -f

    - name: Clean up Docker system
      run: docker system prune -af --volumes

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/projects/fiap
          docker load -i api.tar
          docker load -i angular.tar
          docker-compose down
          docker-compose up -d
